*****Binary Tree Assignment 1*******

1. Minimum Depth of Binary Tree
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:

        if root is None:
            return 0

        if root.left and root.right:
            return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
        else:
            return max(self.minDepth(root.left), self.minDepth(root.right)) + 1

2. Count Complete Tree Nodes
class Solution:
    def countNodes(self, root: Optional[TreeNode]) -> int:
        return self.getNodesNum(root)

    def getNodesNum(self,cur):
        if not cur:
            return 0
        leftNum = self.getNodesNum(cur.left)
        rightNum = self.getNodesNum(cur.right)
        treeNum = leftNum + rightNum + 1
        return treeNum

3. Find Largest Value in Each Tree Row
class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        result = []
        queue = deque([root])

        while queue:
            level_size = len(queue)
            max_val = float('-inf')

            for _ in range(level_size):
                node = queue.popleft()
                max_val = max(max_val, node.val)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            result.append(max_val)
        
        return result

4. Leaf-Similar Trees
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        def dfs(root):
            if not root: 
                return []
            if not (root.left or root.right): 
                return [root.val]
            return dfs(root.left) + dfs(root.right)
        
        if dfs(root1) == dfs(root2):
            return True
        else:
            return False

5. Deepest Leaves Sum
class Solution:
    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:
        queue = deque([root])

        while queue and root:
            levelSum = 0
            for _ in range(len(queue)):
                node = queue.popleft()
                levelSum += node.val
                if node.left: queue.append(node.left)
                if node.right: queue.append(node.right)
        
        return levelSum

6.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

    def findLeaves(root):
       if not root:
           return []

       result = []
       queue = [root]

       while queue:
           level_nodes = []
           size = len(queue)

           for _ in range(size):
               node = queue.pop(0)

               if not node.left and not node.right:
                   level_nodes.append(node.val)
               else:
                   if node.left:
                       queue.append(node.left)
                   if node.right:
                       queue.append(node.right)

           result.append(level_nodes)

       return result



